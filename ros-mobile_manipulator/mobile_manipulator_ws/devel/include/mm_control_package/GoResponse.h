// Generated by gencpp from file mm_control_package/GoResponse.msg
// DO NOT EDIT!


#ifndef MM_CONTROL_PACKAGE_MESSAGE_GORESPONSE_H
#define MM_CONTROL_PACKAGE_MESSAGE_GORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mm_control_package
{
template <class ContainerAllocator>
struct GoResponse_
{
  typedef GoResponse_<ContainerAllocator> Type;

  GoResponse_()
    : go_to_target(false)  {
    }
  GoResponse_(const ContainerAllocator& _alloc)
    : go_to_target(false)  {
  (void)_alloc;
    }



   typedef uint8_t _go_to_target_type;
  _go_to_target_type go_to_target;





  typedef boost::shared_ptr< ::mm_control_package::GoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mm_control_package::GoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GoResponse_

typedef ::mm_control_package::GoResponse_<std::allocator<void> > GoResponse;

typedef boost::shared_ptr< ::mm_control_package::GoResponse > GoResponsePtr;
typedef boost::shared_ptr< ::mm_control_package::GoResponse const> GoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mm_control_package::GoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mm_control_package::GoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mm_control_package::GoResponse_<ContainerAllocator1> & lhs, const ::mm_control_package::GoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.go_to_target == rhs.go_to_target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mm_control_package::GoResponse_<ContainerAllocator1> & lhs, const ::mm_control_package::GoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mm_control_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mm_control_package::GoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mm_control_package::GoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mm_control_package::GoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mm_control_package::GoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mm_control_package::GoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mm_control_package::GoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mm_control_package::GoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc60057baede889bc8a3509f0b2bc102";
  }

  static const char* value(const ::mm_control_package::GoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc60057baede889bULL;
  static const uint64_t static_value2 = 0xc8a3509f0b2bc102ULL;
};

template<class ContainerAllocator>
struct DataType< ::mm_control_package::GoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mm_control_package/GoResponse";
  }

  static const char* value(const ::mm_control_package::GoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mm_control_package::GoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool go_to_target\n"
;
  }

  static const char* value(const ::mm_control_package::GoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mm_control_package::GoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.go_to_target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mm_control_package::GoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mm_control_package::GoResponse_<ContainerAllocator>& v)
  {
    s << indent << "go_to_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.go_to_target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MM_CONTROL_PACKAGE_MESSAGE_GORESPONSE_H
